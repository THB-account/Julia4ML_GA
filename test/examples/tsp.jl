import Random
import Julia4ML_GA

@testset "Traveling Salesman Problem" begin
    @testset "Get traveling cost" begin
        cost = [
            0 20 42 35;
            20 0 30 34;
            42 30 0 12;
            35 34 12 0
            ]
        @test Julia4ML_GA.get_traveling_cost(cost, [1, 2, 3, 4]) == 97
        @test Julia4ML_GA.get_traveling_cost(cost, [1, 2, 4, 3]) == 108
        @test Julia4ML_GA.get_traveling_cost(cost, [3, 4, 1, 2]) == 97
    end

    @testset "Init tsp population" begin
        rng = Random.default_rng()
        cost = [
            0 20 42 35;
            20 0 30 34;
            42 30 0 12;
            35 34 12 0
            ]
        p_size = 10
        p = Julia4ML_GA.init_tsp_population(p_size, cost, rng)
        @test length(p) == p_size
    end

    @testset "4 cities tsp" begin
        rng = Random.default_rng()
        cost = [
            0 20 42 35;
            20 0 30 34;
            42 30 0 12;
            35 34 12 0
            ]
        p_size = 10
        initpop = Julia4ML_GA.init_tsp_population(p_size, cost, rng)
        
        fitnessFun = x -> Julia4ML_GA.get_traveling_cost(cost, x)

        result = Julia4ML_GA.optimize(
            initpop,
            x -> fitnessFun(x),
            Julia4ML_GA.GeneticAlgorithm(
                populationSize=p_size,
                selection=Julia4ML_GA.rank_selection,
                mutation=Julia4ML_GA.displacement,
                crossover=Julia4ML_GA.partially_mapped
            );
            iterations=10,
            rng=rng
        );
        
        solution = Julia4ML_GA.argmin(result)[1]
        @test Julia4ML_GA.get_traveling_cost(cost, solution) == 97

    end

    @testset "20 cities tsp" begin
        cost = [
            0   23  35  42  56  78  90  12  45  34  57  89  63  29  75  31  46  53  81  37;
            23   0  14  25  48  52  67  89  19  50  44  66  74  60  18  55  77  31  95  62;
            35  14   0  13  37  63  50  70  25  36  58  76  49  41  65  23  61  42  87  54;
            42  25  13   0  21  40  71  38  20  22  33  65  53  17  62  29  47  36  69  56;
            56  48  37  21   0  24  48  23  32  49  27  35  20  60  11  44  68  25  40  19;
            78  52  63  40  24   0  38  54  53  61  29  34  41  72  30  68  53  27  35  55;
            90  67  50  71  48  38   0  24  68  75  41  58  30  55  49  72  26  54  21  70;
            12  89  70  38  23  54  24   0  25  39  66  50  53  43  57  20  77  65  40  35;
            45  19  25  20  32  53  68  25   0  19  38  72  64  15  32  50  38  21  29  26;
            34  50  36  22  49  61  75  39  19   0  27  54  35  68  21  62  51  34  20  41;
            57  44  58  33  27  29  41  66  38  27   0  19  34  23  54  17  38  39  50  31;
            89  66  76  65  35  34  58  50  72  54  19   0  30  31  48  46  39  33  58  47;
            63  74  49  53  20  41  30  53  64  35  34  30   0  47  25  33  50  28  61  22;
            29  60  41  17  60  72  55  43  15  68  23  31  47   0  18  25  62  50  44  40;
            75  18  65  62  11  30  49  57  32  21  54  48  25  18   0  44  36  42  60  19;
            31  55  23  29  44  68  72  20  50  62  17  46  33  25  44   0  29  38  72  20;
            46  77  61  47  68  53  26  77  38  51  38  39  50  62  36  29   0  45  47  29;
            53  31  42  36  25  27  54  65  21  34  39  33  28  50  42  38  45   0  24  37;
            81  95  87  69  40  35  21  40  29  20  50  58  61  44  60  72  47  24   0  38;
            37  62  54  56  19  55  70  35  26  41  31  47  22  40  19  20  29  37  38   0
        ]

        best_solution, best_solution_cost = Julia4ML_GA.solve_tsp(cost, iterations=1000)
        @test best_solution_cost < 450
    end

    @testset "40 cities tsp" begin
        cost = [
            0   29  20  21  16  31  100 12  4   31  18  23  42  21  20  30  11  25  19  40  32  22  24  17  36  29  41  26  28  14  37  33  27  25  29  36  30  29  30  40;
            29  0   15  29  28  40  72  21  29  41  14  19  38  25  24  34  15  27  22  37  30  21  20  23  33  26  39  24  32  20  34  28  32  26  24  38  33  30  31  37;
            20  15  0   15  14  25  81  9   23  27  9   14  30  12  15  26  12  21  16  31  22  17  14  18  26  19  33  18  28  16  29  24  26  21  18  32  27  25  26  31;
            21  29  15  0   4   12  92  12  25  13  13  18  26  4   8   20  8   19  14  29  20  11  10  15  23  16  27  15  21  12  23  19  21  16  14  27  22  20  21  27;
            16  28  14  4   0   16  94  9   20  16  9   14  22  2   6   15  5   14  11  25  17  10  7   12  20  13  23  12  18  9   19  15  18  12  10  23  18  16  18  23;
            31  40  25  12  16  0   95  24  36  3   22  19  14  20  15  25  21  24  20  29  24  13  16  8   25  18  29  20  25  12  23  20  25  18  16  30  24  22  24  29;
            100 72  81  92  94  95  0   90  101 99  85  78  65  90  88  82  89  92  86  103 97  79  84  88  105 93  106 91  99  83  96  90  94  87  85  106 100  95  97  103;
            12  21  9   12  9   24  90  0   15  25  13  10  32  13  12  24  10  19  13  30  20  10  9   11  20  13  25  13  18  10  22  16  19  14  12  26  21  19  20  26;
            4   29  23  25  20  36  101 15  0   35  22  21  40  23  20  31  15  29  23  42  30  19  21  17  35  26  41  26  32  18  38  30  31  27  22  40  33  30  32  39;
            31  41  27  13  16  3   99  25  35  0   25  20  17  21  18  27  24  27  23  30  25  14  18  11  28  21  32  22  27  13  26  23  27  20  17  30  26  24  25  31;
            18  14  9   13  9   22  85  13  22  25  0   10  32  9   10  20  9   14  11  28  18  8   6   13  21  14  25  13  19  8   20  15  18  12  9   22  17  14  16  20;
            23  19  14  18  14  19  78  10  21  20  10  0   22  14  12  21  12  12  11  22  18  7   12  10  21  15  23  18  23  11  23  19  19  15  13  21  17  14  16  22;
            42  38  30  26  22  14  65  32  40  17  32  22  0   22  18  29  23  18  20  27  26  14  18  9   26  21  29  21  25  17  28  25  28  23  20  29  23  21  22  28;
            21  25  12  4   2   20  90  13  23  21  9   14  22  0   8   20  6   16  11  27  20  11  9   14  23  16  27  14  20  12  21  18  21  16  12  26  20  18  20  25;
            20  24  15  8   6   15  88  12  20  18  10  12  18  8   0   18  7   15  10  25  17  10  8   13  20  13  23  11  18  9   19  16  18  12  10  24  19  17  19  24;
            30  34  26  20  15  25  82  24  31  27  20  21  29  20  18  0   18  21  17  30  24  16  18  14  29  21  32  21  27  16  30  25  27  20  18  33  26  24  26  31;
            11  15  12  8   5   21  89  10  15  24  9   12  23  6   7   18  0   15  10  25  17  9   8   12  20  13  24  11  18  10  20   18  20  14  9   23  18  15  17  22;
            25  27  21  19  14  24  92  19  29  27  14  12  18  16  15  21  15  0   10  25  22  11  17  16  29  20  31  18  22  14  27  23  26  21  16  30  22  20  22  28;
            19  22  16  14  11  20  86  13  23  23  11  11  20  11  10  17  10  10  0   22  16  8   10  11  25  16  27  14  21  10  22  19  21  14  11  25  20  17  19  23;
            40  37  31  29  25  29  103 30  42  30  28  22  27  27  25  30  25  25  22  0   29  15  24  18  36  30  41  29  33  25  36  32  34  28  25  40  35  32  33  40;
            32  30  22  20  17  24  97  20  30  25  18  18  26  20  17  24  17  22  16  29  0   15  17  12  25  20  31  22  26  15  30  25  26  21  17  32  25  23  25  30;
            22  21  17  11  10  13  79  10  19  14  8   7   14  11  10  16  9   11  8   15  15  0   9   6   17  10  21  14  19  8   20  15  18  13  10  21  16  14  16  22;
            24  20  14  10  7   16  84  9   21  18  6   12  18  9   8   18  8   17  10  24  17  9   0   10  21  14  24  13  19  7   21  16  19  14  10  24  19  17  19  23;
            17  23  18  15  12  8   88  11  17  11  13  10  9   14  13  14  12  16  11  18  12  6   10  0   17  12  23  12  17  9   19  15  16  12  9   21  17  15  17  22;
            36  33  26  23  20  25  105 20  35  28  21  21  26  23  20  29  20  29  25  36  25  17  21  17  0   25  36  26  31  20  34  29  30  25  20  37  30  28  30  36;
            29  26  19  16  13  18  93  13  26  21  14  15  21  16  13  21  13  20  16  30  20  10  14  12  25  0   29  19  25  15  29  23  26  19  15  30  24  21  24  30;
            41  39  33  27  23  29  106 25  41  32  25  23  29  27  23  32  24  31  27  41  31  21  24  23  36  29  0   31  35  24  37  34  35  30  25  41  35  33  35  41;
            26  24  18  15  12  20  91  13  26  22  13  18  21  14  11  21  11  18  14  29  22  14  13  12  26  19  31  0   24  14  26  21  22  16  13  26  22  20  22  28;
            28  32  28  21  18  25  99  18  32  27  19  23  25  20  18  27  18  22  21  33  26  19  19  17  31  25  35  24  0   19  31  28  29  24  19  34  29  26  28  34;
            14  20  16  12  9   12  83  10  18  13  8   11  17  12  9   16  10  14  10  25  15  8   7   9   20  15  24  14  19  0   19  15  19  12  8   21  17  14  15  20;
            37  34  29  23  19  23  96  22  38  26  20  23  28  21  19  30  20  27  22  36  30  20  21  19  34  29  37  26  31  19  0   28  28  23  19  33  30  27  29  35;
            33  28  24  19  15  20  90  16  30  23  15  19  25  18  16  25  18  23  19  32  25  15  16  15  29  23  34  21  28  15  28  0   26  20  18  32  26  24  26  31;
            27  32  26  21  18  25  94  19  31  27  18  19  28  21  18  27  20  26  21  34  26  18  19  16  30  26  35  22  29  19  28  26  0   24  21  34  27  25  27  33;
            25  26  21  16  12  18  87  14  27  20  12  15  23  16  12  20  14  21  14  28  21  13  14  12  25  19  30  16  24  12  23  20  24  0   12  26  21  19  21  26;
            29  24  18  14  10  16  85  12  22  17  9   13  20  12  10  18  9   16  11  25  17  10  10  9   20  15  25  13  19  8   19  18  21  12  0   22  17  15  17  22;
            36  38  32  27  23  30  106 26  40  30  22  21  29  26  24  33  23  30  25  40  32  21  24  21  37  30  41  26  34  21  33  32  34  26  22  0   35  32  34  39;
            30  33  27  22  18  24  100 21  33  26  17  17  23  20  17  26  18  22  20  35  25  16  19  17  30  24  35  22  29  17  30  26  27  21  17  35  0   24  26  31;
            29  30  25  20  16  22  95  19  30  24  14  14  21  18  17  24  15  20  17  32  23  14  17  15  28  21  33  20  26  14  30  24  25  19  15  32  24  0   22  28;
            30  31  26  21  18  24  97  20  32  25  16  16  22  20  19  26  17  22  19  33  25  16  19  17  30  24  35  22  28  15  29  26  27  21  17  34  26  22  0   30;
            40  37  31  27  23  29  103 26  39  31  20  22  28  25  24  31  22  28  23  40  30  22  23  22  36  30  41  28  34  20  35  31  33  26  22  39  31  28  30  0 
        ]


        best_solution, best_solution_cost = Julia4ML_GA.solve_tsp(cost, iterations=1000)
        @test best_solution_cost < 800
    end
end
